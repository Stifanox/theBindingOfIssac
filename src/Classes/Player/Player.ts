
import { Actions, EntityInterface, FaceEntity, Music, PlayerPickup, PlayerStats} from "../../Utils/Interfaces";
import { SpriteAnimator } from "../Animation/SpriteAnimator";
import { MovementActionObject, ShotActionObject } from "../../Utils/Actions";
import { AnimationObjectCreate } from "../Animation/AnimationObjectCreate";
import { PlayfieldSize } from "../../Utils/PlayfiledSize";
import { Tear } from "./Tear";
import { TearManager } from "./TearManager";
import { Pickup } from "../../Utils/Pickup";
import { ImgIssac } from "../../Importer/ImageImporter";
import { SoundPlayerDamaged } from "../../Importer/SoundImporter";

/**
 * Main class of player.
 * @implements EntityInterface
 */
export class Player implements EntityInterface,FaceEntity,Music{
   
    vx: number;
    vy: number;
    imageSource: SpriteAnimator;
    headSource: SpriteAnimator;
    hitboxWidth: number;
    hitboxHeight: number;
    width: number;
    height: number;
    x: number;
    y: number;
    headWidth:number;
    headHeight:number;
    tears:Tear[];
    playerStats:PlayerStats;
    tearManager:TearManager;
    movementObject: Actions; // Jest tutaj aby nie wywalało błędu, dla playera nie ma potrzeby bo ma obiekt globalny
    hitboxX: number;
    hitboxY: number;
    canMove:Actions;
    invincible:boolean;
    playerPickup:PlayerPickup
    audio: HTMLAudioElement;

    constructor(tears:Tear[]) {
        this.playerStats ={
            damage:3,
            tears:500,
            range:300,
            shotSpeed:0.5,
            speed:0.3,
            health:4,
            currentHealth:4
        }

        this.playerPickup ={
            coins:10,
            bombs:1,
            keys:1
        }

        this.tears= tears
        this.tearManager = new TearManager(this.tears,this.playerStats)
        this.x = 480
        this.y = 325
        this.vy = 0
        this.vx =0 
        //BODY OF PLAYER
        this.imageSource = new SpriteAnimator([new AnimationObjectCreate(ImgIssac,32,22,false,9,32,"walkDown",75),new AnimationObjectCreate(ImgIssac,32,22,false,9,32,"walkLeft",448,5),
        new AnimationObjectCreate(ImgIssac,32,22,false,9,32,"walkUp",405),new AnimationObjectCreate(ImgIssac,32,22,false,9,32,"walkRight",118)])
        //HEAD OF PLAYER
        this.headSource = new SpriteAnimator([new AnimationObjectCreate(ImgIssac,39,34,false,1,40,"shotTearDown",20,4),new AnimationObjectCreate(ImgIssac,39,34,false,1,40,"shotTearRight",20,82),
        new AnimationObjectCreate(ImgIssac,39,34,false,1,40,"shotTearUp",20,162),new AnimationObjectCreate(ImgIssac,39,34,false,1,40,"shotTearLeft",20,243)])
        this.height = this.imageSource.spriteHeight +20
        this.width = this.imageSource.spriteWidth + 20
        this.hitboxHeight= this.height - 20
        this.hitboxWidth = this.width - 25
        this.hitboxX = this.x 
        this.hitboxY = this.y 
        this.headWidth = this.headSource.spriteWidth + 40
        this.headHeight = this.headSource.spriteHeight + 40
        this.canMove = {
            UP:true,
            DOWN:true,
            LEFT:true,
            RIGHT:true,
        }

        this.invincible = false
        this.setSpeed()
        this.audio = new Audio(SoundPlayerDamaged)
    }
    
    playMusic(): void {
        this.audio.play()
    }

    /**
     * Draws main body and head of player
     * @param {CanvasRenderingContext2D} ctx canvas 2D context provided from game
     */
    draw(ctx:CanvasRenderingContext2D): void {
        //BODY
        this.imageSource.draw(ctx,this.x,this.y,this.width,this.height)
        this.headSource.draw(ctx,this.x-9,this.y-46,this.headWidth,this.headHeight)
    }

    /**
     * Update position of player enitity
     * @param {number} delta number between 2 frames. This number is generated by requestAnimationFrame.
     */
    update(delta: number): void {
        //MOVEMENT
        MovementActionObject.UP && PlayfieldSize.upperY  < this.y && this.canMove.UP? this.y -= delta*this.vy: null
        MovementActionObject.DOWN && PlayfieldSize.downY > this.y && this.canMove.DOWN ?  this.y += delta*this.vy: null
        MovementActionObject.LEFT && PlayfieldSize.downX < this.x && this.canMove.LEFT ? this.x -= delta*this.vx: null
        MovementActionObject.RIGHT && PlayfieldSize.upperX > this.x && this.canMove.RIGHT ? this.x += delta*this.vx: null
    
        //Po sprawdzeniu czy występuje kolizja z przeciwnikiem ustawia wszystkie zmienne na true
        this.canMove.UP = true
        this.canMove.DOWN = true
        this.canMove.LEFT= true
        this.canMove.RIGHT= true

        //MOVEMENT ANIMATION
        if(MovementActionObject.DOWN) this.imageSource.update(delta,"walkDown")
        else if(MovementActionObject.UP) this.imageSource.update(delta,"walkUp")
        else if(MovementActionObject.LEFT) this.imageSource.update(delta,"walkLeft")
        else if(MovementActionObject.RIGHT) this.imageSource.update(delta,"walkRight")
        else this.imageSource.update(delta)


        //HITBOX
        this.updateHitboxPosition()

        //SHOOTING
        if(ShotActionObject.UP) this.headSource.update(delta,"shotTearUp")
        else if(ShotActionObject.DOWN) this.headSource.update(delta,"shotTearDown")
        else if(ShotActionObject.LEFT) this.headSource.update(delta,"shotTearLeft")
        else if(ShotActionObject.RIGHT) this.headSource.update(delta,"shotTearRight")
        else this.headSource.update(delta)

        this.tearManager.update(delta,this.x,this.y)
    }

    private updateHitboxPosition(){
        this.hitboxX = this.x + 8
        this.hitboxY = this.y + 5
    }
    
    private setSpeed(){
        this.vx = this.playerStats.speed
        this.vy = this.playerStats.speed
    }

    takeDamage():void{
        if(!this.invincible){
            this.playMusic()
            this.invincible = true
            this.playerStats.currentHealth -= .5
            setTimeout(() =>{
                this.invincible =false
            },1500)
        }
    }

    updateStats(playerStats:PlayerStats,playerPickup:PlayerPickup){
        this.playerStats.currentHealth += playerStats.currentHealth
        this.playerStats.health += playerStats.health
        this.playerStats.damage += playerStats.damage
        this.playerStats.range += playerStats.range
        this.playerStats.shotSpeed += playerStats.shotSpeed
        this.playerStats.speed += playerStats.speed
        this.playerStats.tears -= playerStats.tears

        this.playerPickup.bombs += playerPickup.bombs
        this.playerPickup.keys += playerPickup.keys
        this.playerPickup.coins += playerPickup.coins
        this.setSpeed()
    }

    addPickup(pickup:Pickup){
        switch(pickup.type){
            case "coin":
                this.playerPickup.coins += 1
            break
            case "bomb":
                this.playerPickup.bombs += 1
            break
            case "key":
                this.playerPickup.keys += 1
            break
            case "heart":
                if(this.playerStats.currentHealth < this.playerStats.health ){
                    if(this.playerStats.health - this.playerStats.currentHealth == .5) this.playerStats.currentHealth += .5
                    else this.playerStats.currentHealth += 1
                } 
            break
        }
    }
}